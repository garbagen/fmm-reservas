// admin-utils.js

/**
 * Utility functions for the admin dashboard
 */

const AdminUtils = {
    // Date formatting
    formatDate(date) {
        const options = { 
            weekday: 'short', 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
        };
        return new Date(date).toLocaleDateString(undefined, options);
    },

    // Export utilities
    convertToCSV(arr) {
        const array = [Object.keys(arr[0])].concat(arr);
        return array.map(row => {
            return Object.values(row)
                .map(value => `"${value}"`)
                .join(',');
        }).join('\n');
    },

    downloadFile(content, fileName, contentType) {
        const blob = new Blob([content], { type: contentType });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        a.click();
        window.URL.revokeObjectURL(url);
    },

    // Date filter checks
    checkDateFilter(bookingDate, filterType) {
        const date = new Date(bookingDate);
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        switch (filterType) {
            case 'today':
                return date.toDateString() === today.toDateString();
            case 'week':
                const weekAgo = new Date(today);
                weekAgo.setDate(weekAgo.getDate() - 7);
                return date >= weekAgo;
            case 'month':
                const monthAgo = new Date(today);
                monthAgo.setMonth(monthAgo.getMonth() - 1);
                return date >= monthAgo;
            default:
                return true;
        }
    },

    // Status filter checks
    checkStatusFilter(bookingDate, filterType) {
        const date = new Date(bookingDate);
        const today = new Date();
        
        switch (filterType) {
            case 'upcoming':
                return date >= today;
            case 'past':
                return date < today;
            default:
                return true;
        }
    },

    // Form validation
    validateSiteForm(formData) {
        const errors = [];
        
        if (!formData.name?.trim()) {
            errors.push('Site name is required');
        }
        
        if (!formData.description?.trim()) {
            errors.push('Description is required');
        }
        
        if (!formData.timeSlots?.length) {
            errors.push('At least one time slot is required');
        }
        
        return {
            isValid: errors.length === 0,
            errors
        };
    },

    // API helpers
    async makeAuthenticatedRequest(url, options = {}) {
        const token = localStorage.getItem('adminToken');
        if (!token) {
            throw new Error('No authentication token found');
        }

        const response = await fetch(url, {
            ...options,
            headers: {
                ...options.headers,
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error('API request failed');
        }

        return response.json();
    },

    // UI helpers
    showLoadingState(element) {
        if (!element) return;
        
        const spinner = document.createElement('div');
        spinner.className = 'loading-spinner';
        element.appendChild(spinner);
        element.disabled = true;
    },

    hideLoadingState(element) {
        if (!element) return;
        
        const spinner = element.querySelector('.loading-spinner');
        if (spinner) {
            spinner.remove();
        }
        element.disabled = false;
    }
};

// Make utilities globally available
window.AdminUtils = AdminUtils;